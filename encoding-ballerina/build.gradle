/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply from: "$rootDir/gradle/mvnPublisher.gradle"

description = 'Ballerina - Encoding Ballerina Generator'

configurations {
    balTools
    encodingBallerinaBirDir
    encodingBallerinaJar
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':encoding-native')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def artifactEncodingBallerinaBirDir = file("$project.projectDir/target/caches/bir_cache/")
def artifactEncodingBallerinaJar = file("$project.projectDir/target/caches/jar_cache/ballerina/encoding/ballerina.encoding.jar")
def balEncodingJar =  file("$project.projectDir/build/libs/ballerina-encoding-${ballerinaLangVersion}.jar")

task ballerinaBuild {
    dependsOn unzip
    inputs.dir file(project.projectDir)
    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --code-coverage -c -a"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --code-coverage -c -a "
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc -a"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc -a "
            }
        }
        copy {
            // Copying the jar from ballerina build
            from "$project.projectDir/target/caches/jar_cache/ballerina/encoding/ballerina-encoding-.jar"
            into "$project.projectDir/target/caches/jar_cache/ballerina/encoding/"
            rename { String fileName ->
                fileName.replace("ballerina-encoding-.jar", artifactEncodingBallerinaJar.getName())
            }
        }
        // Copy the BIR to the 0.0.0 folder within it
        ant.move file: "${artifactEncodingBallerinaBirDir}/ballerina/encoding/encoding.bir",
                todir: "${artifactEncodingBallerinaBirDir}/ballerina/encoding/0.0.0/"
        copy {
            // Copy the TOML to the same folder as the BIR
            from file("$project.projectDir/Ballerina.toml")
            into file("${artifactEncodingBallerinaBirDir}/ballerina/encoding/0.0.0")
        }

        copy {
            from "$project.projectDir/build/libs/encoding-generator-${ballerinaLangVersion}.jar"
            into "$project.projectDir/build/libs/"
            rename { String fileName ->
                fileName.replace("encoding-generator-${ballerinaLangVersion}.jar", balEncodingJar.getName())
            }
        }
    }
    outputs.dir artifactEncodingBallerinaBirDir
    outputs.file artifactEncodingBallerinaJar
}

artifacts {

    encodingBallerinaBirDir file: artifactEncodingBallerinaBirDir, builtBy: ballerinaBuild
    encodingBallerinaJar file: artifactEncodingBallerinaJar, builtBy: ballerinaBuild

}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
}
ballerinaBuild.dependsOn ":encoding-native:build"
build.dependsOn ballerinaBuild
